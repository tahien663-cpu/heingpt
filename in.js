// 1. C·∫•u h√¨nh v√† Kh·ªüi t·∫°o Th∆∞ vi·ªán
require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require('@google/generative-ai');
const axios = require('axios');
const http = require('http');

// H√†m t·∫°o ƒë·ªô tr·ªÖ (Sleep function)
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

// L·∫•y Token Discord t·ª´ .env
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
if (!DISCORD_BOT_TOKEN) {
    console.error("L·ªói: Kh√¥ng t√¨m th·∫•y DISCORD_BOT_TOKEN. Vui l√≤ng ki·ªÉm tra file .env.");
    process.exit(1);
}

// --- STATUS SERVER CONFIGURATION ---
const STATUS_PORT = process.env.STATUS_PORT || 3000;
const startTime = Date.now();

// --- LOGIC LU√ÇN PHI√äN API KEY ---
const GEMINI_API_KEYS = (process.env.GEMINI_API_KEYS || '')
    .split(',')
    .map(key => key.trim())
    .filter(Boolean);

if (GEMINI_API_KEYS.length === 0) {
    console.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEYS trong file .env.");
    process.exit(1);
}

console.log(`üí° ƒê√£ t·∫£i ${GEMINI_API_KEYS.length} API key c·ªßa Gemini.`);

let currentChatKeyIndex = 0;
let currentAnalysisKeyIndex = 0;

const MODEL_NAME = "gemini-2.0-flash-lite"; 

// --- STATISTICS TRACKING ---
const stats = {
    totalRequests: 0,
    successfulRequests: 0,
    failedRequests: 0,
    cacheHits: 0,
    searchQueries: 0,
    apiKeyFailures: {},
    lastError: null,
    lastErrorTime: null
};

// Kh·ªüi t·∫°o ƒë·∫øm l·ªói cho t·ª´ng key
GEMINI_API_KEYS.forEach((_, index) => {
    stats.apiKeyFailures[index] = 0;
});

// --- DANH S√ÅCH T·ª™ KH√ìA B·ªé QUA T√åM KI·∫æM ---
const GREETING_DENYLIST = [
    'ch√†o', 'chaof', 'hello', 'hi', 'hey',
    'ch√†o b·∫°n', 'ch√†o bot', 'bot ∆°i', '∆°i bot',
    'good morning', 'good afternoon', 'good evening',
    'bu·ªïi s√°ng', 'bu·ªïi tr∆∞a', 'bu·ªïi t·ªëi',
    'c·∫£m ∆°n', 'thank you', 'thanks', 'c·∫£m ∆°n bot',
    't·∫°m bi·ªát', 'bye', 'goodbye', 'pp', 'bubye'
];

function isSimpleGreeting(prompt) {
    const lowerPrompt = prompt.toLowerCase().trim();
    if (GREETING_DENYLIST.includes(lowerPrompt)) {
        return true;
    }
    return GREETING_DENYLIST.some(greeting => lowerPrompt.startsWith(greeting + ' '));
}

// --- T√çNH NƒÇNG T√åM KI·∫æM WEB ---
const SEARCH_API_KEY = process.env.SERPER_API_KEY || process.env.GOOGLE_SEARCH_API_KEY;

async function searchWeb(query) {
    if (!SEARCH_API_KEY) {
        return null; 
    }
    try {
        const response = await axios.post(
            'https://google.serper.dev/search',
            { q: query, num: 5, gl: 'vn', hl: 'vi' }, 
            {
                headers: {
                    'X-API-KEY': SEARCH_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 5000
            }
        );
        if (response.data && response.data.organic) {
            stats.searchQueries++;
            return response.data.organic.slice(0, 5).map(item => ({
                title: item.title,
                snippet: item.snippet,
                link: item.link
            }));
        }
        return null;
    } catch (error) {
        console.error("L·ªói t√¨m ki·∫øm web:", error.message);
        return null;
    }
}

// T·ª´ kh√≥a k√≠ch ho·∫°t t√¨m ki·∫øm
const SEARCH_TRIGGERS = [
    'search', 't√¨m', 't√¨m ki·∫øm', 't√¨m th√¥ng tin', 'tra', 'tra c·ª©u', 
    'tra google', 'google', 'gg', 'h·ªèi google', 'ki·ªÉm tra', 
    't√¨m hi·ªÉu', 't√¨m xem', 'xem th·ª≠', 'cho bi·∫øt', 'cho t√¥i bi·∫øt',
    'th√¥ng tin v·ªÅ', 'th√¥ng tin m·ªõi nh·∫•t', 'tin t·ª©c', 'tin t·ª©c v·ªÅ',
    'c·∫≠p nh·∫≠t', 'c·∫≠p nh·∫≠t v·ªÅ', 'c√≥ g√¨ m·ªõi', 'm·ªõi nh·∫•t', 'l√† ai', 
    'find', 'lookup', 'look up', 'check', 'what is', 'who is',
    'where is', 'when is', 'how to', 'latest', 'news about',
    'information about', 'tell me about', 'show me'
];

function shouldSearchByKeyword(prompt) {
    const lowerPrompt = prompt.toLowerCase();
    return SEARCH_TRIGGERS.some(trigger => 
        lowerPrompt.startsWith(trigger + ' ') || 
        lowerPrompt.startsWith(trigger + ':') ||
        lowerPrompt.includes(' ' + trigger + ' ') ||
        lowerPrompt.includes(trigger + ' v·ªÅ') ||
        lowerPrompt.includes(trigger + ' xem') ||
        lowerPrompt.endsWith(' ' + trigger) 
    );
}

// Cache cho k·∫øt qu·∫£ ph√¢n t√≠ch AI
const searchDecisionCache = new Map();

// --- T√çNH NƒÇNG C·∫¢I THI·ªÜN C√ÇU H·ªéI ---
const queryRefinementCache = new Map();

async function refineQueryWithAI(originalPrompt, conversationContext = "") {
    const cacheKey = originalPrompt.toLowerCase().trim().substring(0, 60);
    if (queryRefinementCache.has(cacheKey)) {
        const cached = queryRefinementCache.get(cacheKey);
        if (Date.now() - cached.timestamp < 1800000) {
            console.log(`üîÑ S·ª≠ d·ª•ng query ƒë√£ c·∫£i thi·ªán t·ª´ cache`);
            return cached.refinedQuery;
        }
    }

    const refinementPrompt = `B·∫°n l√† chuy√™n gia t·ªëi ∆∞u h√≥a c√¢u truy v·∫•n t√¨m ki·∫øm. Nhi·ªám v·ª• c·ªßa b·∫°n l√† bi·∫øn ƒë·ªïi c√¢u h·ªèi th√†nh c√¢u truy v·∫•n t√¨m ki·∫øm t·ªëi ∆∞u cho Google.

${conversationContext ? `--- Ng·ªØ c·∫£nh h·ªôi tho·∫°i ---\n${conversationContext}\n` : ''}
--- C√¢u h·ªèi g·ªëc ---
"${originalPrompt}"

--- Nguy√™n t·∫Øc c·∫£i thi·ªán ---
1. **Lo·∫°i b·ªè**: T·ª´ th·ª´a, l·ªùi ch√†o, t·ª´ c·∫£m th√°n
2. **Th√™m**: T·ª´ kh√≥a quan tr·ªçng, nƒÉm (n·∫øu c·∫ßn th√¥ng tin m·ªõi nh·∫•t)
3. **R√∫t g·ªçn**: Gi·ªØ 3-8 t·ª´ kh√≥a ch√≠nh
4. **C·ª• th·ªÉ h√≥a**: Th√™m ƒë·ªãa ƒëi·ªÉm, th·ªùi gian n·∫øu c·∫ßn
5. **S·ª≠ d·ª•ng ng·ªØ c·∫£nh**: N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc, h√£y k·∫øt h·ª£p th√¥ng tin ƒë√≥

--- V√≠ d·ª• ---
G·ªëc: "B·∫°n c√≥ th·ªÉ t√¨m gi√∫p t√¥i xem gi√° iPhone m·ªõi nh·∫•t kh√¥ng?"
C·∫£i thi·ªán: "gi√° iPhone 16 2025 Vi·ªát Nam"

G·ªëc: "Cho t√¥i bi·∫øt th√¥ng tin v·ªÅ tr·∫≠n ƒë·∫•u h√¥m qua"
C·∫£i thi·ªán: "k·∫øt qu·∫£ b√≥ng ƒë√° h√¥m qua"

G·ªëc: "Anh ·∫•y l√† ai v·∫≠y?" (Ng·ªØ c·∫£nh: ƒëang n√≥i v·ªÅ Elon Musk)
C·∫£i thi·ªán: "Elon Musk ti·ªÉu s·ª≠ 2025"

--- Y√™u c·∫ßu ---
Ch·ªâ tr·∫£ v·ªÅ c√¢u truy v·∫•n ƒë√£ c·∫£i thi·ªán, KH√îNG gi·∫£i th√≠ch. ƒê·ªô d√†i 3-10 t·ª´.`;

    try {
        for (let i = 0; i < GEMINI_API_KEYS.length; i++) {
            const keyIndexToTry = (currentAnalysisKeyIndex + i) % GEMINI_API_KEYS.length;
            const key = GEMINI_API_KEYS[keyIndexToTry];
            
            try {
                console.log(`üîÑ C·∫£i thi·ªán query: Th·ª≠ Key #${keyIndexToTry + 1}...`);
                const genAI = new GoogleGenerativeAI(key);
                const model = genAI.getGenerativeModel({ model: MODEL_NAME });
                const result = await model.generateContent(refinementPrompt);
                
                currentAnalysisKeyIndex = (keyIndexToTry + 1) % GEMINI_API_KEYS.length;
                
                const refinedQuery = result.response.text().trim()
                    .replace(/^["']|["']$/g, '')
                    .substring(0, 100);
                
                if (queryRefinementCache.size >= 50) {
                    const firstKey = queryRefinementCache.keys().next().value;
                    queryRefinementCache.delete(firstKey);
                }
                queryRefinementCache.set(cacheKey, {
                    refinedQuery: refinedQuery,
                    timestamp: Date.now()
                });

                console.log(`üîÑ Query c·∫£i thi·ªán: "${originalPrompt}" ‚Üí "${refinedQuery}"`);
                return refinedQuery;

            } catch (error) {
                console.warn(`‚ö†Ô∏è L·ªói Key #${keyIndexToTry + 1} khi c·∫£i thi·ªán query: ${error.message}`);
            }
        }
        
        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫£i thi·ªán query, s·ª≠ d·ª•ng b·∫£n g·ªëc");
        return cleanSearchKeywords(originalPrompt);
        
    } catch (error) {
        console.error("L·ªói c·∫£i thi·ªán query:", error.message);
        return cleanSearchKeywords(originalPrompt);
    }
}

async function callAnalysisAIWithFailover(prompt) {
    const analysisPrompt = `Ph√¢n t√≠ch c√¢u h·ªèi sau v√† quy·∫øt ƒë·ªãnh c√≥ c·∫ßn t√¨m ki·∫øm web kh√¥ng.

C√ÇU H·ªéI: "${prompt}"

TI√äU CH√ç C·∫¶N SEARCH:
- Th√¥ng tin th·ªùi s·ª±, tin t·ª©c m·ªõi nh·∫•t
- Gi√° c·∫£, t·ª∑ gi√°, ch·ª©ng kho√°n hi·ªán t·∫°i
- Th·ªùi ti·∫øt, l·ªãch tr√¨nh s·ª± ki·ªán
- Th√¥ng tin v·ªÅ ng∆∞·ªùi n·ªïi ti·∫øng, s·ª± ki·ªán g·∫ßn ƒë√¢y
- D·ªØ li·ªáu th·ªëng k√™, s·ªë li·ªáu c·ª• th·ªÉ
- Th√¥ng tin s·∫£n ph·∫©m, ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
- C√¢u h·ªèi "how to", h∆∞·ªõng d·∫´n c·ª• th·ªÉ

KH√îNG C·∫¶N SEARCH:
- Ki·∫øn th·ª©c ph·ªï th√¥ng, l√Ω thuy·∫øt c∆° b·∫£n
- To√°n h·ªçc, khoa h·ªçc c∆° b·∫£n
- L·∫≠p tr√¨nh, gi·∫£i thu·∫≠t chung
- C√¢u h·ªèi tri·∫øt h·ªçc, √Ω ki·∫øn c√° nh√¢n
- S√°ng t·∫°o n·ªôi dung (vi·∫øt vƒÉn, th∆°, code)
- Tr√≤ chuy·ªán th√¥ng th∆∞·ªùng (ch√†o h·ªèi, c·∫£m ∆°n, t·∫°m bi·ªát)

Tr·∫£ l·ªùi ƒê√öNG 1 T·ª™: "YES" ho·∫∑c "NO"`;

    for (let i = 0; i < GEMINI_API_KEYS.length; i++) {
        const keyIndexToTry = (currentAnalysisKeyIndex + i) % GEMINI_API_KEYS.length;
        const key = GEMINI_API_KEYS[keyIndexToTry];
        
        try {
            console.log(`üß† Ph√¢n t√≠ch search: ƒêang th·ª≠ v·ªõi Key #${keyIndexToTry + 1}...`);
            const genAI = new GoogleGenerativeAI(key);
            const model = genAI.getGenerativeModel({ model: MODEL_NAME });
            const result = await model.generateContent(analysisPrompt);
            
            currentAnalysisKeyIndex = (keyIndexToTry + 1) % GEMINI_API_KEYS.length;
            return result; 

        } catch (error) {
            console.warn(`‚ö†Ô∏è L·ªói Key #${keyIndexToTry + 1} khi ph√¢n t√≠ch: ${error.message}`);
        }
    }
    
    throw new Error("T·∫•t c·∫£ API keys c·ªßa Gemini ƒë·ªÅu th·∫•t b·∫°i khi ph√¢n t√≠ch.");
}

async function shouldSearchByAI(prompt) { 
    const cacheKey = prompt.toLowerCase().trim().substring(0, 50);
    if (searchDecisionCache.has(cacheKey)) {
        const cached = searchDecisionCache.get(cacheKey);
        if (Date.now() - cached.timestamp < 1800000) {
            console.log(`üß† S·ª≠ d·ª•ng quy·∫øt ƒë·ªãnh search t·ª´ cache: ${cached.decision}`);
            return cached.decision;
        }
    }

    try {
        const result = await callAnalysisAIWithFailover(prompt); 
        const response = result.response;
        const decision = response.text().trim().toUpperCase();
        
        const shouldSearch = decision.includes('YES');

        if (searchDecisionCache.size >= 50) {
            const firstKey = searchDecisionCache.keys().next().value;
            searchDecisionCache.delete(firstKey);
        }
        searchDecisionCache.set(cacheKey, {
            decision: shouldSearch,
            timestamp: Date.now()
        });

        console.log(`üß† AI quy·∫øt ƒë·ªãnh search: ${shouldSearch ? 'C√ì' : 'KH√îNG'}`);
        return shouldSearch;
    } catch (error) {
        console.error("L·ªói khi ph√¢n t√≠ch AI (t·∫•t c·∫£ c√°c key):", error.message);
        return shouldSearchByKeyword(prompt);
    }
}

function cleanSearchKeywords(prompt) {
    let cleaned = prompt;
    for (const trigger of SEARCH_TRIGGERS) {
        const regex = new RegExp(`(^${trigger}\\s*:?\\s*)|(\\s*${trigger}$)`, 'i');
        cleaned = cleaned.replace(regex, '');
    }
    return cleaned.trim();
}

// --- RATE LIMITING ---
const RATE_LIMIT = {
    maxPerMinute: 15,
    maxPerHour: 100,
    cooldownTime: 4000,
};
const requestTracker = {
    perMinute: [],
    perHour: [],
    lastRequestTime: 0
};

function checkRateLimit() {
    const now = Date.now();
    const oneMinuteAgo = now - 60000;
    const oneHourAgo = now - 3600000;
    requestTracker.perMinute = requestTracker.perMinute.filter(t => t > oneMinuteAgo);
    requestTracker.perHour = requestTracker.perHour.filter(t => t > oneHourAgo);
    if (requestTracker.perMinute.length >= RATE_LIMIT.maxPerMinute) {
        return { allowed: false, reason: `ph√∫t (${RATE_LIMIT.maxPerMinute}/ph√∫t)` };
    }
    if (requestTracker.perHour.length >= RATE_LIMIT.maxPerHour) {
        return { allowed: false, reason: `gi·ªù (${RATE_LIMIT.maxPerHour}/gi·ªù)` };
    }
    const timeSinceLastRequest = now - requestTracker.lastRequestTime;
    if (timeSinceLastRequest < RATE_LIMIT.cooldownTime) {
        const waitTime = Math.ceil((RATE_LIMIT.cooldownTime - timeSinceLastRequest) / 1000);
        return { allowed: false, reason: `cooldown (ƒë·ª£i ${waitTime}s)` };
    }
    return { allowed: true };
}

function recordRequest() {
    const now = Date.now();
    requestTracker.perMinute.push(now);
    requestTracker.perHour.push(now);
    requestTracker.lastRequestTime = now;
}

// --- REQUEST QUEUE ---
const requestQueue = [];
let isProcessingQueue = false;

async function processQueue() {
    if (isProcessingQueue || requestQueue.length === 0) return;
    isProcessingQueue = true;
    while (requestQueue.length > 0) {
        const { message, prompt, sessionData } = requestQueue.shift();
        const rateLimitCheck = checkRateLimit();
        if (!rateLimitCheck.allowed) {
            requestQueue.unshift({ message, prompt, sessionData });
            await sleep(RATE_LIMIT.cooldownTime);
            continue;
        }
        try {
            await handleGeminiRequest(message, prompt, sessionData);
            recordRequest();
            await sleep(RATE_LIMIT.cooldownTime);
        } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω queue:", error);
        }
    }
    isProcessingQueue = false;
}

// --- RESPONSE CACHING ---
const responseCache = new Map();
const CACHE_DURATION = 3600000;

function getCacheKey(prompt) {
    return prompt.toLowerCase().trim().substring(0, 100);
}

function getFromCache(prompt) {
    const key = getCacheKey(prompt);
    const cached = responseCache.get(key);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
        stats.cacheHits++;
        return cached.response;
    }
    if (cached) responseCache.delete(key);
    return null;
}

function saveToCache(prompt, response) {
    const key = getCacheKey(prompt);
    if (responseCache.size >= 100) {
        const firstKey = responseCache.keys().next().value;
        responseCache.delete(firstKey);
    }
    responseCache.set(key, {
        response,
        timestamp: Date.now()
    });
}

// --- RETRY LOGIC ---
const MAX_RETRIES = 5;
const RETRY_DELAYS = [2000, 5000, 10000, 20000, 40000];

async function retryWithBackoff(fn, retries = MAX_RETRIES) {
    for (let attempt = 0; attempt < retries; attempt++) {
        try {
            return await fn();
        } catch (error) {
            const errorMsg = error.message || '';
            const isRetryableError = errorMsg.includes('503');
            const isLastAttempt = attempt === retries - 1;
            
            if (!isRetryableError || isLastAttempt) {
                throw error;
            }
            
            const delay = RETRY_DELAYS[attempt] || 40000;
            console.log(`‚ö†Ô∏è Th·ª≠ l·∫°i (l·ªói 503) l·∫ßn ${attempt + 1}/${retries} sau ${delay / 1000}s...`);
            await sleep(delay);
        }
    }
}

// --- MESSAGE HISTORY ---
const MESSAGE_HISTORY_LIMIT = 10;
const messageHistory = new Map(); 

function addToHistory(channelId, role, content) {
    if (!messageHistory.has(channelId)) {
        messageHistory.set(channelId, []);
    }
    const history = messageHistory.get(channelId);
    history.push({
        role: role,
        parts: [{ text: content }],
        timestamp: Date.now()
    });
    if (history.length > MESSAGE_HISTORY_LIMIT) {
        history.shift();
    }
}

function getHistory(channelId) {
    const history = messageHistory.get(channelId) || [];
    return history.map(msg => ({ role: msg.role, parts: msg.parts }));
}

function getHistoryContextText(channelId) {
    const history = messageHistory.get(channelId);
    if (!history || history.length === 0) return "";
    let context = "\n\n--- L·ªãch s·ª≠ h·ªôi tho·∫°i g·∫ßn ƒë√¢y ---\n";
    history.forEach((msg) => {
        const speaker = msg.role === 'user' ? 'üë§ User' : 'ü§ñ Bot';
        context += `${speaker}: ${msg.parts[0].text}\n`;
    });
    context += "--- K·∫øt th√∫c l·ªãch s·ª≠ ---\n\n";
    return context;
}

setInterval(() => {
    const oneHourAgo = Date.now() - 3600000;
    for (const [channelId, history] of messageHistory.entries()) {
        const filtered = history.filter(msg => msg.timestamp > oneHourAgo); 
        if (filtered.length === 0) {
            messageHistory.delete(channelId);
        } else {
            messageHistory.set(channelId, filtered);
        }
    }
    console.log(`üßπ D·ªçn d·∫πp l·ªãch s·ª≠: ${messageHistory.size} k√™nh c√≤n l·∫°i`);
}, 3600000); 

// --- CHAT SESSIONS ---
const chatSessions = new Map();

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

const safetySettings = [
    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

const systemInstruction = {
    role: "system",
    parts: [{ text: "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI (Gemini 2.0 Flash) tr√™n Discord. H√£y tr·∫£ l·ªùi m·ªôt c√°ch chuy√™n nghi·ªáp, ch√≠nh x√°c, v√† duy tr√¨ ng·ªØ c·∫£nh tr√≤ chuy·ªán. Tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng ti·∫øng l√≥ng ho·∫∑c c√°c t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p."}]
};

function getOrCreateChatSession(channelId) {
    if (chatSessions.has(channelId)) {
        return chatSessions.get(channelId);
    }

    const keyToUse = GEMINI_API_KEYS[currentChatKeyIndex];
    const keyIndexUsed = currentChatKeyIndex;
    
    console.log(`T·∫°o phi√™n chat m·ªõi cho k√™nh ${channelId} d√πng API Key #${keyIndexUsed + 1}`);

    currentChatKeyIndex = (currentChatKeyIndex + 1) % GEMINI_API_KEYS.length;

    const genAI = new GoogleGenerativeAI(keyToUse);
    const model = genAI.getGenerativeModel({ 
        model: MODEL_NAME, 
        safetySettings,
        systemInstruction 
    });

    const history = getHistory(channelId);
    const chat = model.startChat({
        history: history,
        generationConfig: { maxOutputTokens: 4096 }
    });

    const sessionData = {
        chat: chat,
        keyIndex: keyIndexUsed
    };
    chatSessions.set(channelId, sessionData);
    
    return sessionData;
}

// --- STATUS SERVER ---
function formatUptime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;
    if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
    return `${seconds}s`;
}

function getStatusHTML() {
    const uptime = Date.now() - startTime;
    const successRate = stats.totalRequests > 0 
        ? ((stats.successfulRequests / stats.totalRequests) * 100).toFixed(2)
        : '0.00';
    
    const apiKeyStatus = GEMINI_API_KEYS.map((_, index) => {
        const failures = stats.apiKeyFailures[index] || 0;
        const statusColor = failures === 0 ? '#00ff00' : failures < 5 ? '#ffaa00' : '#ff0000';
        return `
            <div style="padding: 8px; margin: 5px; background: #2a2a2a; border-radius: 5px; border-left: 4px solid ${statusColor};">
                <strong>Key #${index + 1}</strong>: ${failures} l·ªói
            </div>
        `;
    }).join('');

    return `
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bot Status - ${client.user?.tag || 'Loading...'}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            padding: 30px 0;
            border-bottom: 2px solid rgba(255,255,255,0.1);
            margin-bottom: 30px;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .status-badge {
            display: inline-block;
            padding: 8px 20px;
            background: ${client.user ? '#00ff00' : '#ff0000'};
            color: #000;
            border-radius: 20px;
            font-weight: bold;
            margin-top: 10px;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .card {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.2);
            border: 1px solid rgba(255,255,255,0.1);
        }
        .card h2 {
            font-size: 1.3em;
            margin-bottom: 15px;
            color: #ffdd57;
        }
        .stat {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        .stat:last-child { border-bottom: none; }
        .stat-label { color: #ddd; }
        .stat-value { 
            font-weight: bold;
            font-size: 1.1em;
        }
        .progress-bar {
            height: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00ff00, #00aa00);
            transition: width 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
            font-weight: bold;
        }
        .api-keys {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        .refresh-info {
            text-align: center;
            padding: 20px;
            color: #aaa;
            font-size: 0.9em;
        }
        .error-box {
            background: rgba(255,0,0,0.2);
            border: 1px solid #ff0000;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .loading {
            animation: pulse 2s infinite;
        }
    </style>
    <script>
        setInterval(() => location.reload(), 30000);
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Discord Bot Status</h1>
            <div class="status-badge ${client.user ? '' : 'loading'}">
                ${client.user ? '‚úÖ ONLINE' : '‚è≥ STARTING...'}
            </div>
            <p style="margin-top: 15px; font-size: 1.2em;">
                ${client.user ? client.user.tag : 'ƒêang k·∫øt n·ªëi...'}
            </p>
        </div>

        <div class="grid">
            <!-- Bot Info -->
            <div class="card">
                <h2>üìä Th√¥ng Tin Bot</h2>
                <div class="stat">
                    <span class="stat-label">Uptime</span>
                    <span class="stat-value">${formatUptime(uptime)}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Model</span>
                    <span class="stat-value">${MODEL_NAME}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Servers</span>
                    <span class="stat-value">${client.guilds?.cache.size || 0}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Channels</span>
                    <span class="stat-value">${chatSessions.size}</span>
                </div>
            </div>

            <!-- Request Stats -->
            <div class="card">
                <h2>üìà Th·ªëng K√™ Request</h2>
                <div class="stat">
                    <span class="stat-label">T·ªïng Request</span>
                    <span class="stat-value">${stats.totalRequests}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Th√†nh C√¥ng</span>
                    <span class="stat-value" style="color: #00ff00;">${stats.successfulRequests}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Th·∫•t B·∫°i</span>
                    <span class="stat-value" style="color: #ff6b6b;">${stats.failedRequests}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">T·ªâ L·ªá Th√†nh C√¥ng</span>
                    <span class="stat-value">${successRate}%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${successRate}%;">
                        ${successRate}%
                    </div>
                </div>
            </div>

            <!-- Cache & Search -->
            <div class="card">
                <h2>üíæ Cache & T√¨m Ki·∫øm</h2>
                <div class="stat">
                    <span class="stat-label">Cache Hits</span>
                    <span class="stat-value" style="color: #00ff00;">${stats.cacheHits}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Cache Size</span>
                    <span class="stat-value">${responseCache.size}/100</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Search Queries</span>
                    <span class="stat-value">${stats.searchQueries}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Search API</span>
                    <span class="stat-value">${SEARCH_API_KEY ? '‚úÖ Active' : '‚ùå Inactive'}</span>
                </div>
            </div>

            <!-- Rate Limiting -->
            <div class="card">
                <h2>‚è±Ô∏è Rate Limiting</h2>
                <div class="stat">
                    <span class="stat-label">Queue Size</span>
                    <span class="stat-value">${requestQueue.length}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Requests/Minute</span>
                    <span class="stat-value">${requestTracker.perMinute.length}/${RATE_LIMIT.maxPerMinute}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Requests/Hour</span>
                    <span class="stat-value">${requestTracker.perHour.length}/${RATE_LIMIT.maxPerHour}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">Cooldown</span>
                    <span class="stat-value">${RATE_LIMIT.cooldownTime / 1000}s</span>
                </div>
            </div>
        </div>

        <!-- API Keys Status -->
        <div class="card">
            <h2>üîë API Keys Status (${GEMINI_API_KEYS.length} keys)</h2>
            <div class="api-keys">
                ${apiKeyStatus}
            </div>
        </div>

        <!-- Last Error -->
        ${stats.lastError ? `
        <div class="card">
            <h2>‚ö†Ô∏è L·ªói G·∫ßn Nh·∫•t</h2>
            <div class="error-box">
                <strong>Th·ªùi gian:</strong> ${new Date(stats.lastErrorTime).toLocaleString('vi-VN')}<br>
                <strong>L·ªói:</strong> ${stats.lastError}
            </div>
        </div>
        ` : ''}

        <div class="refresh-info">
            üîÑ Trang t·ª± ƒë·ªông l√†m m·ªõi m·ªói 30 gi√¢y | 
            Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
        </div>
    </div>
</body>
</html>`;
}

const statusServer = http.createServer((req, res) => {
    if (req.url === '/') {
        res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(getStatusHTML());
    } else if (req.url === '/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            status: 'ok',
            uptime: Date.now() - startTime,
            botConnected: !!client.user,
            totalRequests: stats.totalRequests,
            successRate: stats.totalRequests > 0 
                ? ((stats.successfulRequests / stats.totalRequests) * 100).toFixed(2)
                : '0.00'
        }));
    } else if (req.url === '/stats') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            stats,
            uptime: Date.now() - startTime,
            bot: {
                username: client.user?.tag || 'Not connected',
                servers: client.guilds?.cache.size || 0,
                activeSessions: chatSessions.size
            },
            rateLimit: {
                queueSize: requestQueue.length,
                perMinute: requestTracker.perMinute.length,
                perHour: requestTracker.perHour.length
            },
            cache: {
                size: responseCache.size,
                hits: stats.cacheHits
            }
        }, null, 2));
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found');
    }
});

statusServer.listen(STATUS_PORT, () => {
    console.log(`üìä Status server ƒëang ch·∫°y t·∫°i: http://localhost:${STATUS_PORT}`);
    console.log(`üìä Health check: http://localhost:${STATUS_PORT}/health`);
    console.log(`üìä JSON stats: http://localhost:${STATUS_PORT}/stats`);
});

client.once('clientReady', () => {
    console.log(`ü§ñ Bot Discord ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p v·ªõi t√™n: ${client.user.tag}`);
    console.log(`üí° Model: ${MODEL_NAME}`);
    console.log(`üí° Gi·ªõi h·∫°n Rate Limit: ${RATE_LIMIT.maxPerMinute}/ph√∫t, ${RATE_LIMIT.maxPerHour}/gi·ªù`);
    console.log(`üí° Th·ªùi gian ch·ªù (Cooldown): ${RATE_LIMIT.cooldownTime / 1000}s gi·ªØa c√°c request`);
    console.log(`üí° L·ªãch s·ª≠ tin nh·∫Øn: L∆∞u ${MESSAGE_HISTORY_LIMIT} tin nh·∫Øn g·∫ßn nh·∫•t m·ªói k√™nh`);
    console.log(`üîç T√¨m ki·∫øm Web: ${SEARCH_API_KEY ? 'ƒê√£ k√≠ch ho·∫°t (c√≥ c·∫£i thi·ªán query)' : 'Ch∆∞a c·∫•u h√¨nh'}`);
});

async function handleGeminiRequest(message, prompt, sessionData) {
    const channelId = message.channel.id;
    const { chat, keyIndex } = sessionData;
    
    stats.totalRequests++;
    
    try {
        message.channel.sendTyping();

        let needsSearch = false; 
        let cleanPrompt = prompt;

        if (isSimpleGreeting(prompt)) {
            needsSearch = false;
        } else {
            needsSearch = shouldSearchByKeyword(prompt);
            if (!needsSearch) {
                needsSearch = await shouldSearchByAI(prompt);
            } 
            if (needsSearch) {
                cleanPrompt = cleanSearchKeywords(prompt);
            }
        }

        let searchResults = null;
        let searchContext = ""; 
        let refinedQuery = cleanPrompt;
        
        if (needsSearch && SEARCH_API_KEY) {
            await message.channel.send("üîç ƒêang ph√¢n t√≠ch v√† t√¨m ki·∫øm th√¥ng tin...");
            
            const historyContext = getHistoryContextText(channelId);
            refinedQuery = await refineQueryWithAI(cleanPrompt, historyContext);
            
            if (refinedQuery !== cleanPrompt && refinedQuery.length > 0) {
                await message.channel.send(`üîÑ Query t·ªëi ∆∞u: *"${refinedQuery}"*`);
            }
            
            searchResults = await searchWeb(refinedQuery);
            
            if (searchResults && searchResults.length > 0) {
                searchContext = searchResults.map((r, i) => 
                    `[Ngu·ªìn ${i+1}] ${r.title}: ${r.snippet}`
                ).join('\n\n');
            } else {
                await message.channel.send("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£, s·∫Ω tr·∫£ l·ªùi t·ª´ ki·∫øn th·ª©c c√≥ s·∫µn.");
            }
        }

        if (!searchResults) {
            const cachedResponse = getFromCache(cleanPrompt);
            if (cachedResponse) {
                console.log("üì¶ S·ª≠ d·ª•ng response t·ª´ cache");
                await message.reply(`${cachedResponse}\n\n_üíæ (T·ª´ cache)_`);
                addToHistory(channelId, 'user', prompt);
                addToHistory(channelId, 'model', cachedResponse);
                stats.successfulRequests++;
                return;
            }
        }

        let fullPrompt = "";
        const historyContextText = getHistoryContextText(channelId);

        if (searchResults && searchContext) {
            const searchInstruction = `D·ª±a v√†o th√¥ng tin web d∆∞·ªõi ƒë√¢y v√† l·ªãch s·ª≠ h·ªôi tho·∫°i (n·∫øu li√™n quan), h√£y tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt cho c√¢u h·ªèi sau: ${cleanPrompt}`;
            fullPrompt = historyContextText 
                ? `${historyContextText}--- TH√îNG TIN WEB ---\n${searchContext}\n\n--- Y√äU C·∫¶U ---\n${searchInstruction}`
                : `--- TH√îNG TIN WEB ---\n${searchContext}\n\n--- Y√äU C·∫¶U ---\n${searchInstruction}`;
        } else {
            fullPrompt = cleanPrompt; 
        }

        const apiResponse = await retryWithBackoff(async () => {
            return await chat.sendMessage(fullPrompt);
        });

        const responseText = apiResponse.response.text();

        if (!responseText) {
            throw new Error("API kh√¥ng tr·∫£ v·ªÅ response h·ª£p l·ªá.");
        }

        addToHistory(channelId, 'user', prompt);
        addToHistory(channelId, 'model', responseText);

        if (!searchResults) {
            saveToCache(cleanPrompt, responseText);
        }

        await message.reply(responseText);
        
        stats.successfulRequests++;
        
        const searchStatus = searchResults 
            ? `üîç search (query: "${refinedQuery}")` 
            : needsSearch ? '‚ö†Ô∏è search l·ªói' : 'üí¨ kh√¥ng search';
        const logStats = `‚úÖ ${searchStatus} | Key: #${keyIndex + 1} | Queue: ${requestQueue.length} | Cache: ${responseCache.size} | History: ${messageHistory.get(channelId)?.length || 0}/10`;
        console.log(logStats);

    } catch (error) {
        stats.failedRequests++;
        stats.lastError = error.message;
        stats.lastErrorTime = Date.now();
        stats.apiKeyFailures[keyIndex] = (stats.apiKeyFailures[keyIndex] || 0) + 1;
        
        console.error(`L·ªói Gemini API (Key #${keyIndex + 1}):`, error.message);
        
        const errorMsg = error.message || '';
        const isQuotaError = errorMsg.includes('429') || errorMsg.includes('resourceExhausted');
        const isPermissionError = errorMsg.includes('403') || errorMsg.includes('permissionDenied');

        if (isQuotaError || isPermissionError) {
            console.warn(`üõë Key #${keyIndex + 1} ƒë√£ ch·∫øt. X√≥a phi√™n chat.`);
            chatSessions.delete(channelId);
            
            await message.reply(`‚ö†Ô∏è Xin l·ªói, API key cho phi√™n tr√≤ chuy·ªán n√†y (Key #${keyIndex + 1}) ƒë√£ h·∫øt h·∫°n ho·∫∑c g·∫∑p l·ªói. 
    
**Vui l√≤ng g·ª≠i l·∫°i tin nh·∫Øn c·ªßa b·∫°n.**
T√¥i s·∫Ω t·ª± ƒë·ªông th·ª≠ m·ªôt API key kh√°c cho b·∫°n.`);

        } else {
            let userErrorMsg = "‚ö†Ô∏è Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.";
            if (errorMsg.includes('503')) {
                userErrorMsg = "üîÑ D·ªãch v·ª• t·∫°m th·ªùi qu√° t·∫£i. ƒêang th·ª≠ l·∫°i...";
            }
            await message.reply(userErrorMsg);
        }
    }
}

client.on('messageCreate', async message => {
    if (message.author.bot) return;
    
    if (!message.mentions.users.has(client.user.id)) return;

    const prompt = message.content.replace(`<@${client.user.id}>`, '').trim();

    if (!prompt) {
        return message.reply("H√£y h·ªèi t√¥i ƒëi·ªÅu g√¨ ƒë√≥!");
    }

    if (prompt.toLowerCase() === 'clear history' || prompt.toLowerCase() === 'x√≥a l·ªãch s·ª≠') {
        const chatId = message.channel.id;
        messageHistory.delete(chatId);
        chatSessions.delete(chatId);
        return message.reply("üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa k√™nh n√†y!");
    }

    const rateLimitCheck = checkRateLimit();
    if (!rateLimitCheck.allowed) {
        return message.reply(`‚è≥ ƒêang b·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô (${rateLimitCheck.reason}). Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v√†o h√†ng ƒë·ª£i.`);
    }
    
    const chatId = message.channel.id;
    const sessionData = getOrCreateChatSession(chatId);

    requestQueue.push({ message, prompt, sessionData });
    processQueue();
});

client.login(DISCORD_BOT_TOKEN);
